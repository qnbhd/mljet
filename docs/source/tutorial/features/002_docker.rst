
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/features/002_docker.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_features_002_docker.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_features_002_docker.py:


.. _docker:

2. Deploy with Docker
=============================================================

In this example, we deploy the model with Docker.
For this example you need to install Docker, see `Docker <https://docs.docker.com/get-docker/>`_
and XGBoost, see `XGBoost <https://xgboost.readthedocs.io/en/latest/build.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 14-15

Firstly, import :mod:`mljet`.

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: default



    import mljet


.. GENERATED FROM PYTHON SOURCE LINES 20-22

Import :class:`xgboost.XGBClassifier` as classifier
and :mod:`sklearn.datasets` to load the iris dataset.

.. GENERATED FROM PYTHON SOURCE LINES 22-27

.. code-block:: default


    from sklearn.datasets import load_iris
    from xgboost import XGBClassifier



.. GENERATED FROM PYTHON SOURCE LINES 28-29

Let's load dataset and create and train a simple model.

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: default



    X, y = load_iris(return_X_y=True)
    clf = XGBClassifier()
    clf.fit(X, y)



.. GENERATED FROM PYTHON SOURCE LINES 37-38

Now, we can deploy the model to `docker` with :func:`mljet.contrib.entrypoint.cook`.

.. GENERATED FROM PYTHON SOURCE LINES 38-49

.. code-block:: default


    mljet.contrib.cook(
        model=clf,
        strategy="docker",
        tag="mljet-xgboost",
        port=5000,
        need_run=True,
        silent=True,
        verbose=False,
    )


.. GENERATED FROM PYTHON SOURCE LINES 50-76

Let's see on passed parameters.

- `model` - model to deploy - `clf` (XGBoost model)

- `strategy` - strategy to use - `docker`

- `tag` - tag for the docker image - `mljet-xgboost`

- `port` - port for the docker container - `8000`

- `backend` - backend to use - `sanic`, see `Sanic <https://sanicframework.org/>`_

- `need_run` - run service after build or not - `True` (only create container)

- `silent` - silent mode - `True`, non-blocking mode

- `verbose` - verbose mode - `True`, print DEBUG logs

After calling the :func:`mljet.contrib.entrypoint.cook` function
You can see `build` folder in the current directory.
And you can see the docker image and container with name `mljet-xgboost`.

Now we can send a request to the model.
For this example, we use requests, see `Requests <https://requests.readthedocs.io/en/master/>`_.
You can use any other tool, for example `Postman <https://www.postman.com/>`_.
Firstly, import requests.

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: default


    import time

    import requests


.. GENERATED FROM PYTHON SOURCE LINES 82-83

Let's sleep for 5 seconds and check the response.

.. GENERATED FROM PYTHON SOURCE LINES 83-93

.. code-block:: default



    time.sleep(5)

    response = requests.post(
        "http://localhost:5000/predict",
        json={"data": X.tolist()},
    )

    print(response.json())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_tutorial_features_002_docker.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 002_docker.py <002_docker.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 002_docker.ipynb <002_docker.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
